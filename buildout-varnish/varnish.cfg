[buildout]
extends = 
    buildout.d/settings.cfg
    buildout.d/maintenance.cfg

parts =
		nginx-build
		nginx
		varnish-build
		varnish
		supervisor

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
configure-options =
    --with-http_gzip_static_module
    --with-http_stub_status_module
    --with-http_flv_module
    --http-client-body-temp-path=${buildout:directory}/var/tmp/client
    --http-proxy-temp-path=${buildout:directory}/var/tmp/proxy

[nginx]
recipe = gocept.nginx
nginx = nginx-build
configuration =
    user ${users:effective-user};
    error_log ${buildout:directory}/var/log/main-error.log warn;


    #timer_resolution 100ms;

    # Used for debug Nginx:http://wiki.nginx.org/Debugging
    worker_rlimit_core 25M;

    worker_processes 1;

    # With this option you can bind the worker process to a CPU, it calls sched_setaffinity().
    # Your OS may schedule all workers on single CPU/core this can be avoided using worker_cpu_affinity.
    worker_cpu_affinity 0001 0010 0100 1000;

    daemon off;
    master_process  off;

    events {
        worker_connections 1024;
        # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ] ;
        use epoll;
    }

    http {
        # Proxy to Varnish cache
        upstream varnish {
            server ${varnish:bind} max_fails=3  fail_timeout=30s;
    	}

        charset  utf-8;

        client_max_body_size            30M;
        client_body_buffer_size         128k;
        large_client_header_buffers     4 32k;
        connection_pool_size            256;
        request_pool_size               4k;
        client_header_buffer_size       32k;
 
        # Seta buffer das conexoes proxy
        proxy_buffers 8 256k;
        proxy_buffer_size 256k;
        
        sendfile        on;
        tcp_nopush on;
 
        # Gzip
        gzip              on;
        gzip_buffers      16 8k;
        gzip_comp_level   9;
        gzip_http_version 1.0;
        gzip_proxied any;
        gzip_min_length   0;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp image/png image/gif image/jpg image/jpeg;
        gzip_vary         on;
        gzip_disable     "MSIE [1-6]\.(?!.*SV1)";
        
        # Error pages
        error_page 500 502 503 504  /500.html;
        
        # Document Root
        root  ${buildout:directory}/var/www/;
        
        # Prevenir erros amigaveis no IE
        msie_padding on;
        
        # Evitamos erros do Zope, Plone, Varnish (on|off)
	# Se (off) o Plone mostrara sua mensagem padrao de erro ao inves
	# de recebermos erros do Nginx
        #proxy_intercept_errors off;
        
        # Log
        log_format main '$remote_addr - $remote_user [$time_local]'
          '"$request" $status $bytes_sent '
          '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
          '"$gzip_ratio" "$http_host"';
        log_format time_log '$upstream_response_time $request';
        log_format status_log '$status $time_local';
         
        access_log ${buildout:directory}/var/log/access.log main;
        access_log ${buildout:directory}/var/log/time.log time_log;
        access_log ${buildout:directory}/var/log/status.log status_log;

        include ${buildout:directory}/parts/nginx-build/conf/mime.types;
        
        include ${buildout:directory}/etc/vhosts/*.conf;
     

        server {
            listen 80;  
            root ${buildout:directory}/var/www;

            # Wait for slow Zopes and Plones
    	    proxy_read_timeout 300s;

            #Impedir que arquivos que como .htaccess de serem vistos em Nginx
            location ~ /\.ht {
                 deny  all;
            }

 
            location / {
                index index.html;
            }
       }
   
    }


[varnish-build]
recipe = zc.recipe.cmmi
url = ${downloads:varnish}

[varnish]
recipe = plone.recipe.varnish
config = ${buildout:directory}/etc/varnish/varnish.vcl
cache-size = 50M
daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
bind = 127.0.0.1:10080
telnet = 127.0.0.1:9001
cache-type = malloc


[supervisor]
recipe = collective.recipe.supervisor
plugins =
       supervisor>2.1
       superlance
port = 9900
user = admin_supervisor
password = admin
programs =
      50 nginx (autostart=true startsecs=3) ${nginx-build:location}/sbin/nginx [-c ${buildout:directory}/parts/nginx/nginx.conf]
      40 varnish (autostart=true startsecs=3) ${buildout:directory}/bin/varnish [-F] true 

